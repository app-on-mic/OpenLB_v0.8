
Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor>::computeEquilibrium(const olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor> *, int, double, const double *, double) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(70,10)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 0.610 
   remark #15479: lightweight vector operations: 7 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor>::iniEquilibrium(olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor> *, olb::Cell<double, olb::descriptors::D2Q9Descriptor> &, double, const double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(76,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 0.640 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(77,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor>::collide(olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor> *, olb::Cell<double, olb::descriptors::D2Q9Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(90,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.610 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3) inlined into chopardDynamics.hh(90,12)
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15460: masked strided loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 69 
   remark #15477: vector loop cost: 35.000 
   remark #15478: estimated potential speedup: 3.100 
   remark #15479: lightweight vector operations: 49 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(90,12)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor>::staticCollide(olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor> *, olb::Cell<double, olb::descriptors::D2Q9Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(104,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 0.640 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3) inlined into chopardDynamics.hh(104,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between cell line 158 and u line 176

   LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(104,12)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor>::chopardBgkCollision(olb::Cell<double, olb::descriptors::D2Q9Descriptor> &, double, const double *, double, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(156,18)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 0.640 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between cell line 158 and u line 176

   LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(159,27)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D2Q9Descriptor>::chopardEquilibrium(int, double, const double *, double, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at chopardDynamics.hh(175,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 0.610 
   remark #15479: lightweight vector operations: 7 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor>::computeEquilibrium(const olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor> *, int, double, const double *, double) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(70,10)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 7 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor>::iniEquilibrium(olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, double, const double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(76,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 0.730 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(77,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor>::collide(olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(90,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3) inlined into chopardDynamics.hh(90,12)
<Peeled>
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3) inlined into chopardDynamics.hh(90,12)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15460: masked strided loads: 3 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 79 
   remark #15477: vector loop cost: 21.750 
   remark #15478: estimated potential speedup: 2.570 
   remark #15479: lightweight vector operations: 57 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 3 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(90,12)
   LOOP END
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3) inlined into chopardDynamics.hh(90,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor>::staticCollide(olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(104,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 0.730 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3) inlined into chopardDynamics.hh(104,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between cell line 158 and u line 176

   LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(104,12)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor>::chopardBgkCollision(olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, double, const double *, double, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(92,3) inlined into chopardDynamics.hh(156,18)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 0.730 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at chopardDynamics.hh(157,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between cell line 158 and u line 176

   LOOP BEGIN at chopardDynamics.hh(175,5) inlined into chopardDynamics.hh(159,27)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::ChopardDynamics<double, olb::descriptors::D3Q19Descriptor>::chopardEquilibrium(int, double, const double *, double, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at chopardDynamics.hh(175,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 7 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================
