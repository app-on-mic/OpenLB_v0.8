
Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::~BoundaryConditionInstantiator3D(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(144,55)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(147,53)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::~BoundaryConditionInstantiator3D(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(144,55) inlined into ../../src/core/boundaryInstantiator3D.h(143,61)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(147,53) inlined into ../../src/core/boundaryInstantiator3D.h(143,61)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::~BoundaryConditionInstantiator3D(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(144,55) inlined into ../../src/core/boundaryInstantiator3D.h(143,61)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(147,53) inlined into ../../src/core/boundaryInstantiator3D.h(143,61)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary0N(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7) inlined into ../../src/core/boundaryInstantiator3D.h(727,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(727,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3) inlined into ../../src/core/boundaryInstantiator3D.h(727,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5) inlined into ../../src/core/boundaryInstantiator3D.h(727,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary0P(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7) inlined into ../../src/core/boundaryInstantiator3D.h(734,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(734,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3) inlined into ../../src/core/boundaryInstantiator3D.h(734,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5) inlined into ../../src/core/boundaryInstantiator3D.h(734,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary1N(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7) inlined into ../../src/core/boundaryInstantiator3D.h(741,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(741,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3) inlined into ../../src/core/boundaryInstantiator3D.h(741,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5) inlined into ../../src/core/boundaryInstantiator3D.h(741,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary1P(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7) inlined into ../../src/core/boundaryInstantiator3D.h(748,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(748,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3) inlined into ../../src/core/boundaryInstantiator3D.h(748,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5) inlined into ../../src/core/boundaryInstantiator3D.h(748,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary2N(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7) inlined into ../../src/core/boundaryInstantiator3D.h(755,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(755,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3) inlined into ../../src/core/boundaryInstantiator3D.h(755,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5) inlined into ../../src/core/boundaryInstantiator3D.h(755,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary2P(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7) inlined into ../../src/core/boundaryInstantiator3D.h(762,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(762,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3) inlined into ../../src/core/boundaryInstantiator3D.h(762,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5) inlined into ../../src/core/boundaryInstantiator3D.h(762,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary0N(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7) inlined into ../../src/core/boundaryInstantiator3D.h(769,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(769,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3) inlined into ../../src/core/boundaryInstantiator3D.h(769,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5) inlined into ../../src/core/boundaryInstantiator3D.h(769,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary0P(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7) inlined into ../../src/core/boundaryInstantiator3D.h(776,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(776,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3) inlined into ../../src/core/boundaryInstantiator3D.h(776,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5) inlined into ../../src/core/boundaryInstantiator3D.h(776,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary1N(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7) inlined into ../../src/core/boundaryInstantiator3D.h(783,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(783,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3) inlined into ../../src/core/boundaryInstantiator3D.h(783,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5) inlined into ../../src/core/boundaryInstantiator3D.h(783,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary1P(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7) inlined into ../../src/core/boundaryInstantiator3D.h(790,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(790,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3) inlined into ../../src/core/boundaryInstantiator3D.h(790,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5) inlined into ../../src/core/boundaryInstantiator3D.h(790,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary2N(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7) inlined into ../../src/core/boundaryInstantiator3D.h(797,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(797,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3) inlined into ../../src/core/boundaryInstantiator3D.h(797,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5) inlined into ../../src/core/boundaryInstantiator3D.h(797,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary2P(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7) inlined into ../../src/core/boundaryInstantiator3D.h(804,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(804,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3) inlined into ../../src/core/boundaryInstantiator3D.h(804,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5) inlined into ../../src/core/boundaryInstantiator3D.h(804,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge0NN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(812,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(812,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(812,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge0NP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(819,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(819,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(819,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge0PN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(826,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(826,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(826,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge0PP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(833,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(833,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(833,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge1NN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(840,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(840,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(840,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge1NP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(847,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(847,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(847,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge1PN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(854,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(854,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(854,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge1PP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(861,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(861,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(861,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge2NN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(868,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(868,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(868,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge2NP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(875,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(875,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(875,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge2PN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(882,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(882,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(882,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge2PP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7) inlined into ../../src/core/boundaryInstantiator3D.h(889,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3) inlined into ../../src/core/boundaryInstantiator3D.h(889,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5) inlined into ../../src/core/boundaryInstantiator3D.h(889,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge0NN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(898,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(898,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(898,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge0NP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(905,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(905,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(905,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge0PN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(912,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(912,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(912,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge0PP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(919,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(919,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(919,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge1NN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(926,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(926,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(926,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge1NP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(933,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(933,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(933,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge1PN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(940,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(940,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(940,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge1PP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(947,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(947,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(947,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge2NN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(954,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(954,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(954,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge2NP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(961,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(961,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(961,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge2PN(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(968,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(968,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(968,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge2PP(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7) inlined into ../../src/core/boundaryInstantiator3D.h(975,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3) inlined into ../../src/core/boundaryInstantiator3D.h(975,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5) inlined into ../../src/core/boundaryInstantiator3D.h(975,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, olb::BlockGeometryStatistics3D *, int, int, int, int, int, int, double, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(344,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(342,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(343,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary<0, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(166,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary<0, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(166,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary<1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(166,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary<1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(166,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary<2, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(166,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addVelocityBoundary<2, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(166,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(159,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(160,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<0, 1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<0, -1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<0, 1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<0, -1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<1, 1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<1, 1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<1, -1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<1, -1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<2, 1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<2, -1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<2, 1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addExternalVelocityEdge<2, -1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(226,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(225,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<0, 1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<0, -1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<0, 1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<0, -1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<1, 1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<1, 1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<1, -1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<1, -1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<2, 1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<2, -1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<2, 1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addInternalVelocityEdge<2, -1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(264,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(262,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(263,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector<int>(std::vector<int, std::allocator<int>> *, int, int, const std::vector<int, std::allocator<int>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.4.7/bits/stl_algobase.h(757,7) inlined into /usr/include/c++/4.4.7/bits/stl_vector.h(303,4)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.4.7/bits/stl_algobase.h(757,7) inlined into /usr/include/c++/4.4.7/bits/stl_vector.h(303,4)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 2.460 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.4.7/bits/stl_algobase.h(757,7) inlined into /usr/include/c++/4.4.7/bits/stl_vector.h(303,4)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, olb::BlockGeometryStatistics3D *, int, int, int, int, int, int, double, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(663,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(661,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(662,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary<0, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(197,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary<0, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(197,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary<1, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(197,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary<1, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(197,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary<2, -1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(197,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>>::addPressureBoundary<2, 1>(olb::BoundaryConditionInstantiator3D<double, olb::descriptors::D3Q19Descriptor, olb::InamuroBoundaryManager3D<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>>> *, int, int, int, int, int, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(192,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(46,3) inlined into ../../src/core/boundaryInstantiator3D.h(197,11)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(190,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../../src/core/boundaryInstantiator3D.h(191,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1>::collide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(88,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(100,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(139,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(120,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(125,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(130,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(145,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.500 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(158,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(160,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(103,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1>::invert(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1> *, const double (*)[3], double (*)[3])

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(631,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 30 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(607,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 611 and  line 613

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1>::staticCollide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(190,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 1.170 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(202,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 1.170 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(241,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(222,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(227,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(232,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(247,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(260,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(262,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(205,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1>::collide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(88,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(100,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(139,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(120,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(125,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(130,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(145,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.500 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(158,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(160,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(103,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1>::invert(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1> *, const double (*)[3], double (*)[3])

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(631,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 30 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(607,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 611 and  line 613

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1>::staticCollide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(190,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 1.170 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(202,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 1.170 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(241,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(222,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(227,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(232,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(247,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(260,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(262,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(205,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1>::collide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(88,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 311 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(100,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 311 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(139,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(120,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(125,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(130,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(145,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counterDim line 154 and counterDim line 149
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(158,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(160,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(103,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1>::invert(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1> *, const double (*)[3], double (*)[3])

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(631,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 30 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(607,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 611 and  line 613

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1>::staticCollide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(190,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counter line 315 and counter line 310
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(202,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counter line 315 and counter line 310
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(241,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(222,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(227,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(232,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(247,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counterDim line 256 and counterDim line 251
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(260,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(262,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(205,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1>::collide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(88,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 311 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(100,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 311 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(139,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(120,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(125,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(130,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(145,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counterDim line 154 and counterDim line 149
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(158,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(160,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(103,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1>::invert(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1> *, const double (*)[3], double (*)[3])

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(631,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 30 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(607,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 611 and  line 613

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1>::staticCollide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(190,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counter line 315 and counter line 310
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(202,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counter line 315 and counter line 310
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(241,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(222,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(227,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(232,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(247,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between counterDim line 256 and counterDim line 251
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(260,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(262,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(205,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1>::collide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(88,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(100,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(139,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(120,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(125,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(130,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(145,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.000 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(158,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(160,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(103,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1>::invert(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1> *, const double (*)[3], double (*)[3])

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(631,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 30 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(607,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 611 and  line 613

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1>::staticCollide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(190,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(202,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(241,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(222,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(227,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(232,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(247,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.000 
   remark #15478: estimated potential speedup: 1.420 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(260,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(262,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(205,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1>::collide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(76,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(79,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(84,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(88,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(100,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(110,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between csVel line 315 and u line 315
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(139,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(120,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(125,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(130,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(145,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.000 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(158,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(160,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(98,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(103,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(138,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1>::invert(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1> *, const double (*)[3], double (*)[3])

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(631,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 1.250 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 30 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(633,7)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(607,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 611 and  line 613

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(609,7)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1>::staticCollide(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1> *, olb::Cell<double, olb::descriptors::D3Q19Descriptor> &, const double *, olb::LatticeStatistics<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/util.h(124,5) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Peeled>
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 11.250 
   remark #15478: estimated potential speedup: 2.090 
   remark #15479: lightweight vector operations: 33 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(170,44) inlined into inamuroNewtonRaphsonDynamics.hh(178,37)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 4.220 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(181,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 0.430 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(186,49)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(190,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(202,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(547,3) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between invGradGradError line 551 and xi line 553

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(550,5) inlined into inamuroNewtonRaphsonDynamics.hh(212,31)
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(306,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Peeled>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 1.940 
   remark #15479: lightweight vector operations: 14 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(324,49) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
<Remainder>
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(329,51) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(344,3) inlined into inamuroNewtonRaphsonDynamics.hh(241,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 0.980 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(222,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(227,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(232,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(247,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.000 
   remark #15478: estimated potential speedup: 1.420 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(260,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(262,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(200,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(205,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(321,3) inlined into inamuroNewtonRaphsonDynamics.hh(240,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, -1, -1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, -1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, -1, 1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, -1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, 1, -1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, 1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, 1, 1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 0, 1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, -1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, 1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, -1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, 1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, -1, -1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, -1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, -1, 1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, -1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, 1, -1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, 1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 21 
            remark #15477: vector loop cost: 8.000 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 12 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, 1, 1>::processSubDomain(olb::OuterVelocityEdgeProcessor3D<double, olb::descriptors::D3Q19Descriptor, 2, 1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(181,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(182,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(183,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 1.680 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 22 
            remark #15477: vector loop cost: 8.500 
            remark #15478: estimated potential speedup: 1.570 
            remark #15479: lightweight vector operations: 13 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(198,11)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15467: unmasked aligned streaming stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 9.000 
            remark #15478: estimated potential speedup: 0.390 
            remark #15479: lightweight vector operations: 8 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(217,20)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 8 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 0.700 
            remark #15479: lightweight vector operations: 6 
            remark #15480: medium-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(219,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

            LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
                  remark #15315: loop was not vectorized: low trip count
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15479: lightweight vector operations: 35 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15487: type converts: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(221,26)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(119,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(194,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(195,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(196,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, -1, -1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, -1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.260 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, -1, 1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, -1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.270 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, 1, -1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, 1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.260 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, 1, 1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, -1, 1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.270 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, -1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.260 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, 1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, -1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.650 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.270 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, -1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, -1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 1.260 
   remark #15479: lightweight vector operations: 12 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, 1>::process(olb::OuterVelocityCornerProcessor3D<double, olb::descriptors::D3Q19Descriptor, 1, 1, 1> *, olb::BlockLattice3D<double, olb::descriptors::D3Q19Descriptor> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(307,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(308,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 1.270 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into ../../src/core/boundaryPostProcessors3D.hh(334,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/finiteDifference3D.h(69,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(309,3)
<Remainder>
LOOP END

LOOP BEGIN at ../../src/core/boundaryPostProcessors3D.hh(336,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(66,5) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between iPi line 75 and iPi line 67

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15479: lightweight vector operations: 35 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../../src/core/firstOrderLbHelpers.h(67,7) inlined into ../../src/core/boundaryPostProcessors3D.hh(338,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1>::computeGradGradError(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, 1> *, double (*)[3], double *, const double &, const double *, const double *, const double *, const std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(362,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(374,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(380,51)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(388,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(391,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 0.730 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(402,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between _M_start line 418 and _M_start line 418

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(410,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(413,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(432,53)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(442,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 463 and _M_start line 464

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(450,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(453,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(469,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(471,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(473,53)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(485,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(489,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Peeled>
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 1.930 
         remark #15479: lightweight vector operations: 12 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(503,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(505,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(510,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Peeled>
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 11 
            remark #15458: masked indexed (or gather) loads: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 47 
            remark #15477: vector loop cost: 25.000 
            remark #15478: estimated potential speedup: 1.820 
            remark #15479: lightweight vector operations: 38 
            remark #15480: medium-overhead vector operations: 1 
            remark #15487: type converts: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U34e line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U34f line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(378,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(428,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(430,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1>::computeGradGradError(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 2, -1> *, double (*)[3], double *, const double &, const double *, const double *, const double *, const std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(362,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(374,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(380,51)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(388,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(391,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 0.730 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(402,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between _M_start line 418 and _M_start line 418

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(410,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(413,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(432,53)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(442,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 463 and _M_start line 464

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(450,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(453,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(469,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(471,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(473,53)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(485,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(489,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Peeled>
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 1.930 
         remark #15479: lightweight vector operations: 12 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(503,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(505,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(510,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Peeled>
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 11 
            remark #15458: masked indexed (or gather) loads: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 47 
            remark #15477: vector loop cost: 25.000 
            remark #15478: estimated potential speedup: 1.820 
            remark #15479: lightweight vector operations: 38 
            remark #15480: medium-overhead vector operations: 1 
            remark #15487: type converts: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U32d line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U32e line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(378,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(428,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(430,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1>::computeGradGradError(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, 1> *, double (*)[3], double *, const double &, const double *, const double *, const double *, const std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(362,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between  line 371 and  line 366
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(374,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(380,51)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(388,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(391,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 0.730 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(402,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between _M_start line 418 and _M_start line 418

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(410,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(413,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(432,53)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(442,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 463 and _M_start line 464

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(450,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(453,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(469,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(471,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(473,53)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(485,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(489,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Peeled>
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 1.930 
         remark #15479: lightweight vector operations: 12 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(503,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(505,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(510,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Peeled>
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 11 
            remark #15458: masked indexed (or gather) loads: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 47 
            remark #15477: vector loop cost: 25.000 
            remark #15478: estimated potential speedup: 1.820 
            remark #15479: lightweight vector operations: 38 
            remark #15480: medium-overhead vector operations: 1 
            remark #15487: type converts: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U30c line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U30d line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(378,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(428,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(430,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1>::computeGradGradError(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 1, -1> *, double (*)[3], double *, const double &, const double *, const double *, const double *, const std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(362,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between  line 371 and  line 366
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(374,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(380,51)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(388,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(391,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 0.730 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(402,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between _M_start line 418 and _M_start line 418

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(410,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(413,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(432,53)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(442,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 463 and _M_start line 464

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(450,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(453,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(469,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(471,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(473,53)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(485,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(489,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Peeled>
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 1.930 
         remark #15479: lightweight vector operations: 12 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(503,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(505,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(510,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Peeled>
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 11 
            remark #15458: masked indexed (or gather) loads: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 47 
            remark #15477: vector loop cost: 25.000 
            remark #15478: estimated potential speedup: 1.820 
            remark #15479: lightweight vector operations: 38 
            remark #15480: medium-overhead vector operations: 1 
            remark #15487: type converts: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U2eb line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U2ec line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(378,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(428,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(430,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1>::computeGradGradError(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, 1> *, double (*)[3], double *, const double &, const double *, const double *, const double *, const std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(362,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 1.170 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(374,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(380,51)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(388,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(391,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 0.730 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(402,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between _M_start line 418 and _M_start line 418

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(410,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(413,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(432,53)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(442,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 463 and _M_start line 464

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(450,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(453,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(469,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(471,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(473,53)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(485,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(489,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Peeled>
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 1.930 
         remark #15479: lightweight vector operations: 12 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(503,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(505,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(510,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Peeled>
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 11 
            remark #15458: masked indexed (or gather) loads: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 47 
            remark #15477: vector loop cost: 25.000 
            remark #15478: estimated potential speedup: 1.820 
            remark #15479: lightweight vector operations: 38 
            remark #15480: medium-overhead vector operations: 1 
            remark #15487: type converts: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U2ca line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U2cb line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(378,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(428,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(430,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1>::computeGradGradError(olb::InamuroNewtonRaphsonDynamics<double, olb::descriptors::D3Q19Descriptor, olb::BGKdynamics<double, olb::descriptors::D3Q19Descriptor>, 0, -1> *, double (*)[3], double *, const double &, const double *, const double *, const double *, const std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(362,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 1.170 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../../src/core/util.h(92,3) inlined into inamuroNewtonRaphsonDynamics.hh(374,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(380,51)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(388,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(391,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 0.730 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(402,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between _M_start line 418 and _M_start line 418

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(410,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(413,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15527: loop was not vectorized: function call to _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(432,53)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(442,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 463 and _M_start line 464

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(450,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(453,9)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.730 
         remark #15479: lightweight vector operations: 7 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(469,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(471,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between _M_start line 475 and _M_start line 478

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(473,53)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(485,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(489,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Peeled>
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 1.930 
         remark #15479: lightweight vector operations: 12 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(492,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(503,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(505,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(510,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Peeled>
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 11 
            remark #15458: masked indexed (or gather) loads: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 47 
            remark #15477: vector loop cost: 25.000 
            remark #15478: estimated potential speedup: 1.820 
            remark #15479: lightweight vector operations: 38 
            remark #15480: medium-overhead vector operations: 1 
            remark #15487: type converts: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(515,55)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U2a9 line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(533,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between U2aa line 132 and  line 95
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(376,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(426,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(378,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(428,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at inamuroNewtonRaphsonDynamics.hh(430,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================
